============================Sprawozdanie lab 9 - Aleksandra Łabęda============================

Zadanie 1.

Złożoność obliczeniowa
1. Sortowanie stringów przy uzyciu Arrays.sort(arr) 
zakłądając że N to ilość stringów w tablicy a S to suma długości wszystkich stringów,
złożoność czasowa tego sortowania to O(SlogN)
2. Iteracja przez znaki pierwszego i ostatniego stringa po przesortowaniu tablicy ma
złożoność O(min(M, N)), dla M będącego długością krótszego stringa i N będącego
długością dłuższego
Ostatecznie O(SlogN + min(M, N))
Można przyjąć O(MAX*N*logN) gdzie N to ilosc stringów w tablicy a MAX to maksymalna
 liczba znaków w każdym stringu


Złożoność pamięciowa
1. sortowanie zwykle jedynie stałej ilości dodatkowej pamięci, zatem jego złożoność
 pamięciowa wynosi O(1)
2. Inne zmienne takie jak size, min, iterate czy prefix... zajmują również stałą
ilość pamięci niezależnie od rozmiaru danych wejściowych, zatem złożoność pamięciowa
tych zmiennych wynosci O(1)
Ostateczna złożoność pamięciowa algorytmu wynosi zatem O(1)

---------------------------------------------------------------------------------------------

Zadanie 2.

Złożoność obliczeniowa:
1. Iteracja przez łańcuchy:
O(n), gdzie n to długość łańcuchów s1 i s2.
2. Porównanie tablic occurrences:
O(1), ponieważ ilość liter w alfabecie jest stała.
Ostateczna złożoność obliczeniowa to
O(n)

Złożoność pamięciowa:
Tablica occurrences:
O(26) => O(1) ponieważ ilość liter w alfabecie jest stała.
Pozostałe zmienne są stałe i niezależne od rozmiaru danych wejściowych.
Ostateczna złożoność pamięciowa to:
O(1).

---------------------------------------------------------------------------------------------

Zadanie 3.

Złożoność czasowa:
O(c), gdzie c jest liczbą kolumn, algorytm iteruje się po każdej kolumnnie
raz, wykonując operacje w stałym czasie dla każdej kolumny

Złożoność pamięciowa:
O(c), gdzie c to liczba kolumn - pamięć potzrzebna
jest proporcjonalna do liczby kolumn, poza tym złożoność jest stała
 ze względu na określony rozmiar matrixa (2*c, bo dwa wiersze)

 ---------------------------------------------------------------------------------------------

Zadanie 4.

1)
simple_input.txt:
Ilosc wysp: 8
Rozmiary:
41
26
20
18
18
15
21
1

large_input.txt:
Ilosc wysp: 8
Rozmiary:
34960
21416
19
12
9998
2343
16811
27

2) Złożoność pamięciowa i obliczeniowa

Złożoność czasowa:
Odczytanie mapy z pliku i zainicjowanie obiektu Map - O(height * width)
Znalezienie wysp - O(height * width)
Pętle po wszystkich polach mapy - O(height * width)
Dla każdego nieodwiedzonego lądu, oznaczenie go jako odwiedzonego i dodanie do kolejki - O(height * width)
Przetworzenie wszystkich sąsiadów danego pola - O(1)
Znalezienie rozmiaru każdej wyspy - O(liczba_wszystkich_pol_na_wyspie) //max height*width
Całkowita złożoność czasowa wynosi zatem: O(height * width + liczba_wszystkich_pol_na_wyspie) = O(height * width)

Złożoność pamięciowa:
Struktury danych - O(height * width) dla obiektu Map, O(height * width) dla tablicy visited.
Lista wysp - O(liczba_wysp)
W przypadku BFS używanej do znalezienia wyspy, złożoność pamięciowa => O(min(height, width))
ze względu na rozmiar kolejki.
Całkowita złożoność pamięciowa wynosi więc: O(height * width).
