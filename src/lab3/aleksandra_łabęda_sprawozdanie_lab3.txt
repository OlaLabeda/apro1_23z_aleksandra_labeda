Aleksandra Łabęda, 24.10.2023
APRO1, 103

====================================================================================
ZADANIE 1:
====================================================================================


- Wartości zmiennych po prawej stronie operatora przypisania są
rzutowane na odpowiednie typy, co jest konieczne,
aby zachować spójność typów.
Zmienne, na których wykonane były operacje,
przechowują wyniki tych operacji.

PRZYKŁADY:

        1. char x = (char) daysInYear;
        - Wartość zmiennej `daysInYear` wynosi 365.
        Po rzutowaniu na typ char wartosc jest niestandardowym znakiem.

        2. short castSomeNumber = (short) someNumber;
        - Wartość zmiennej `someNumber` wynosi 555,
        po rzutowaniu na `short` wartość pozostaje taka sama,
        czyli 555. Rzutowanie jest konieczne, bo int jest szerszy niż short.

        3. short reallyBig = (short) 1_111_111;
        - Wartość 1_111_111 jest poza zakresem wartości,
        które można przechować w zmiennej short. Po rzutowaniu zachodzi
        przepełnienie i wartość reallyBig będzie wynosić -9617.

        4. char letter = 'a' + 1;
        - Wartość 'a' jest rzutowana na jej kod ASCII,
        czyli 97, a następnie dodawane jest 1, co daje wartość 98,
        czyli znak 'b'. Rzutowanie jest konieczne, aby wykonać operację arytmetyczną.

        5. int value = 1 + (int) 'a';
        - Wartość 'a' jest rzutowana na jej kod ASCII,
        czyli 97, a następnie dodawane jest 1, co daje wartość 98.
        Rzutowanie jest konieczne, aby wykonać operację arytmetyczną.

CZYLI:
Jawne rzutowanie jest konieczne w przypadkach,
gdy zmienne oczekują wartości innego typu niż wartość po prawej stronie przypisania.
W przeciwnym przypadku, jeśli typy są kompatybilne, rzutowanie może być pominięte.
Jednak zawsze należy uważać na potencjalne utraty danych lub
przepełnienia podczas rzutowania.
Rzutowanie niejawne - kiedy zmiennej o szerszym zakresie przypisuje sie wartosc
zmiennej o weższym zakresie np. short a = 3; int x = a;

- Problemy z liczbami zmiennoprzecinkowymi wynikają z ograniczeń precyzji
w reprezentacji float i zaokrągleń.
	-> W przypadku dodawania
        bardzo dużych lub dzielenia przez bardzo małe liczby,
        może dojść do utraty precyzji i błędów obliczeniowych.


====================================================================================
ZADANIE 2:
====================================================================================


Wynik nie będzie dobry dla każdego typu zmiennej result
silnia charakteryzuje się szybkim wzrostem wartości, więc łatwo o 
dobór zbyt małego kubełka.

Dla int:
Silnia będzie obliczana poprawnie dla N w zakresie od 0 do 12, 
po przekroczeniu 12 wystąpi przepełnienie i wynik będzie nieprawidłowy.

Dla long:
Silnia będzie obliczana poprawnie dla N w zakresie od 0 do 20, 
po przekroczeniu 20 wystąpi przepełnienie.

Dla short:
Silnia będzie obliczana poprawnie dla N w zakresie od 0 do 7, 
po przekroczeniu 7 wystąpi przepełnienie.

Aby obliczyć silnię dla większych wartości N, 
należałoby użyć typów o większym zakresie, takich jak int lub long, 
w zależności od zakresu, jaki jest wymagany dla danej sytuacji.


====================================================================================
ZADANIE 3:
====================================================================================


Sortowanie bąbelkowe (Bubble Sort):

-Średnia złożoność czasowa: O(n^2), gdzie n to liczba elementów do posortowania.
-Najlepszy przypadek: O(n), gdy lista jest już posortowana, bo nie 
wymaga żadnych zamian.
-Najgorszy przypadek: O(n^2), gdy lista jest posortowana w odwrotnej kolejności
lub w praktycznie dowolny sposób. Algorytm musi porównać i zamienić 
każdą parę elementów na każdym etapie sortowania


Algorytm porównuje elementy w liście i przesuwa się po niej w poszukiwaniu 
sąsiadujących par elementów, które są źle uporządkowane. 
Jeśli znajdzie taką parę, zamienia te elementy miejscami.

W najgorszym przypadku, gdy lista jest w odwrotnej kolejności, 
każdy element musi być przesunięty na swoje właściwe miejsce poprzez wiele zamian. 
To prowadzi do pełnego przeglądu listy wielokrotnie.

Algorytm kończy się, gdy nie ma już zamian do zrobienia 
na liście, co oznacza, że lista jest już posortowana.


====================================================================================

Sortowanie przez łączenie (Merge Sort):

-Średnia złożoność czasowa: O(n log n), 
gdzie n to liczba elementów do posortowania.
-Najlepszy przypadek/Najgorszy przypadek: O(n log n), 
ten algorytm ma zawsze tę samą złożoność, niezależnie od danych wejściowych.


Złożoność O(n log n) w przypadku Merge Sort wynika z faktu, 
że algorytm dzieli listę na mniejsze części (rekurencyjnie) i łączy je 
w jedną posortowaną listę. 

Obliczanie złożoności MergeSort:

-Dzielenie listy: W pierwszym kroku, algorytm podzieli listę na 
dwie równe lub prawie równe części. To jest operacja o złożoności O(1), 
ponieważ wymaga stałej liczby operacji niezależnie od rozmiaru listy.

-Rekurencyjne sortowanie: algorytm rekurencyjnie sortuje każdą 
z tych dwóch mniejszych list. Dla każdej z tych podlist algorytm
ponownie dzieli ją na dwie części i rekurencyjnie sortuje, 
aż do osiągnięcia jednoelementowych list, co ma złożoność O(log n), 
gdzie "n" to początkowy rozmiar listy.

-Scalanie: Po zakończeniu sortowania rekurencyjnego algorytm scalania łączy 
te mniejsze listy w jedną listę posortowaną. Operacja ta ma 
złożoność czasową O(n), ponieważ musimy przeglądać i porównywać wszystkie elementy, 
a także kopiować je do nowej listy wynikowej.

-> Ostateczna złożoność obliczeniowa Merge Sort wynika z połączenia
 tych trzech kroków. Mamy O(1) za podział, O(log n) za sortowanie rekurencyjne 
i O(n) za scalanie. Ostatecznie złożoność wynosi O(n log n) w przypadku najlepszym, 
średnim i najgorszym.